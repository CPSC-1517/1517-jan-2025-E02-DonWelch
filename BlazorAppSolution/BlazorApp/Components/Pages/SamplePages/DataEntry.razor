@page "/dataentry"
<PageTitle>Data Entry</PageTitle>
@rendermode InteractiveServer

<!-- 
this namespace is needed because we are using classes/enum from the namespace OOPsReview
where the namespace of the web application is BlazorApp and BlazorApp.Components (which
is the default using the project and page folder names)
-->
@using OOPsReview

<h1>Data Entry</h1>
<h4>Employment Data collection</h4>

@*
    we wish to add a blockquote but center the control on the page
    to do so, we will use bootstrap formating with rows/columns

    the offset-n will skip over n blocks from the left side of the row

*@
<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:gainsboro;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the local controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
        </blockquote>
    </div>
</div>

@*
    feedback area
        success message
        error messages
*@

<!--
Success area
check if there is a feedback message, if so display it

also could use: if(feedBackMsg.Length > 0)
-->

@if(!string.IsNullOrWhiteSpace(feedBackMsg))
{
    <div class="alert alert-success">
        <p>@feedBackMsg</p>
    </div>
}

<!--
Error Message area
check if there are any error messages, if so display them
-->

@if(errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach(var error in errorMsgs)
            {
                <!--
                due to the structure of a Dictionary entry
                there are two components: key and value
                Here we wish to just use the value

                If this was a List collection there is only
                one component, the string
                therefore you would NOT need the .Value
                -->
                <li>@error.Value</li>
            }
        </ul>
    </div>
}

<!--
form area
standard html controls
use bootstrap for formating
each control will be on a separate row
each row is stack top to bottom
-->

<fieldset>
    <legend>Employment Data</legend>
    <!--
    the structure of a row will contain 2 columns
    1) will contain the label for the data entry
    2) will contain the input control for the data entry
    -->
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="title">Position Title</label>
        </div>
        <div class="col-md-2">
            <input type="text" id="title" @bind="empTitle"
            placeholder="enter position" />
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="years">Years in Position</label>
        </div>
        <div class="col-md-2">
            <!-- restrict the data type for this control to allow ONLY numbers
            the step attribute allows the control's spinner to increment by
            a select interval, default is 1
            -->
            <input type="number" id="years" @bind="empYears"
            placeholder="eg: 3.4" step="0.1"
            style="width:85px;"/>
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="startdate">Start Date</label>
        </div>
        <div class="col-md-2">
            <!-- restrict the data type for this control to allow ONLY dates-->

            <input type="date" id="startdate" @bind="empStartDate" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="levelS">Supervisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
            this will limit the user to ONLY acceptable values
            -->
            <select id="levelS" @bind="empLevelS">
                <!--
                there is a line for each item in the Enum
                you could hard-code each option tag

                the option tag has 2 components:
                value: this is the value that will be returned to the control variable
                text: this is text that will be display whent the selection list is show
                syntax   <option value="somevalue">display Text</option>

                <option value="Entry">Entry</option>
                <option value="TeamMember">TeamMember</option>
                <option value="TeamLeader">TeamLeader</option>
                <option value="Supervisor">Supervisor</option>
                <option value="DepartmentHead">DepartmentHead</option>
                <option value="Owner">Owner</option>

                -->
                <!--
                you can also access the Enum definition and
                extract each enum value (treating the Enum as a collection)
                -->
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //each Enum will consider the value as a string
                    //the value attribute is the value returned when a choice has been made
                    //the string between the opening and closing tag will be displayed to the user
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="levelR">Supervisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
            this will limit the user to ONLY acceptable values

            this control is not a standard html input control
            this control is a Blazor control
            this control needs to use bind-value instead of just bind
            namespace for the Blazor controls is: Microsoft.AspNetCore.Components.Forms
            (declare already for you in _Imports.razor)
            -->
            <InputRadioGroup Name="supervisoryradio" id="levelR" @bind-Value="empLevelR">
                @foreach (var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //each Enum will consider the value as a string
                    //the value attribute is the value returned when a choice has been made
                    //the string between the opening and closing tag will be displayed to the user
                    <InputRadio Name="supervisoryradio" Value="@item" /> @item <br/>
                }
            </InputRadioGroup>
        </div>
    </div>
    <br />
    <div class="row">
        <!--
        the centering of the buttons on this row was done by using all 12 columns and the
        class text-center
        -->
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnCollect">
                Submit
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
            @onclick="OnClear">
                Clear
            </button>
        </div>
    </div>
</fieldset>
@code {
    private string feedBackMsg = "";

    //could be using a List<string> as well as this Dictionary
    //private List<string> errormsgs = new ();

    //the Dictionary has a structure of 2 values: TKey (acts like a primary key)
    //                                            TValue which is the string associated with the key
    //one could search the dictionary on the TKey value and retreive the TValue string
    //NOTE: the TKey value MUST be unique within the entries of the Dictionary
    Dictionary<string, string> errorMsgs = new Dictionary<string, string>();

    //Employment data variables
    private string empTitle;
    private double empYears;
    private DateTime empStartDate;
    private SupervisoryLevel empLevelS;
    private SupervisoryLevel empLevelR;


    protected override void OnInitialized()
    {
        // feedBackMsg = "this is a success message";
        // errorMsgs.Add("1", "first error message");
        // errorMsgs.Add("2", "second error message");
        // errorMsgs.Add("3", "third error message");

        //use today's date as the default for StartDate when the page 1st appears
        empStartDate = DateTime.Today;
        base.OnInitialized();
    }

    private void OnCollect()
    {
        //clear out any old messages
        feedBackMsg = "";
        errorMsgs.Clear();

        //primitive validation
        //  presence
        //  datatype/pattern (Regex)
        //  range of values

        //Business Rules (aka your validation requirements)
        //title must be presence, must have at least one character
        //start date cannot be in the future
        //years cannot be less than zero

        if(string.IsNullOrWhiteSpace(empTitle))
        {
            errorMsgs.Add("Title", "Title is required.");
        }

        if(empYears < 0)
        {
            errorMsgs.Add("Years", "Years cannot be a negative value");
        }

        if(empStartDate >= DateTime.Today.AddDays(1))
        {
            errorMsgs.Add("Date", "Start date cannot be in the future");
        }

        if(errorMsgs.Count == 0)
        {
            //at this point the code assumes the data is valid
            //further processing of the data can be completed
            feedBackMsg = $"{empTitle} {empYears} {empStartDate} {empLevelS} {empLevelR}";
        }
        
    }

    private void OnClear()
    {
        //clear out any old messages
        feedBackMsg = "";
        errorMsgs.Clear();

        //reset the input controls to the opening page defaults
        empTitle = "";
        empYears = 0;
        empStartDate = DateTime.Today;
        empLevelS = SupervisoryLevel.Entry;
        empLevelR = SupervisoryLevel.Entry;
    }
}

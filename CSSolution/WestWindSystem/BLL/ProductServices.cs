
using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

#region Additional Namespaces
using Microsoft.EntityFrameworkCore; //needed for the .Include
using Microsoft.EntityFrameworkCore.ChangeTracking;
using WestWindSystem.DAL;
using WestWindSystem.Entities;
#endregion

namespace WestWindSystem.BLL
{
    public class ProductServices
    {
        #region setup the context connection variable and class constructor
        private readonly WestWindContext _context;

        //constructor to be used in the creation of the instance of this class
        //the registered reference for the context connection (database connection)
        //  will be passed from the IServiceCollection registered services
        internal ProductServices(WestWindContext registeredcontext)
        {
            _context = registeredcontext;
        }
        #endregion

        #region Queries

        public List<Product> Product_GetByCategoryID(int categoryid)
        {
            //IEnumerable<Product> info = _context.Products
            //                                    .Where(x => x.CategoryID == categoryid)
            //                                    .OrderBy(x => x.ProductName);
            //return info.ToList();

            //alternate
            List<Product> info = _context.Products
                                               .Where(x => x.CategoryID == categoryid)
                                               .OrderBy(x => x.ProductName)
                                               .ToList();
            return info;

        }

        //if you wish to use the Include technique to obtain the Supplier company name
        //public List<Product> Product_GetByCategoryID(int categoryid)
        //{

        //    List<Product> info = _context.Products
        //                                        .Include(x => x.Supplier)
        //                                       .Where(x => x.CategoryID == categoryid)
        //                                       .OrderBy(x => x.ProductName)
        //                                       .ToList();
        //    return info;
        //}

        //obtain the record from the database using the appropriate table and it's primary key
        public Product Product_GetByID(int productid)
        {
            return _context.Products
                           .Where(x => x.ProductID == productid)
                           .FirstOrDefault();

            //.Find checks for primary keys
            //return _context.Products.Find(productid);
        }
        #endregion

        #region CRUD for Add, Update and Delete services

        public int Product_Add(Product item)
        {
            //Adding a record to your database may require addition validation that was not
            //  done on the front end
            //Such validation could be
            //  was data actually passed to the method
            //  the pkey may not be created on the database, it is user supplied
            //      the pkey key supplied should be tested to see if it already exists on the database
            //  there could be a set of business rules that evolve checking data against
            //      existing data on the database that is not part of the record being added

            //do any validation needed within the service method

            //  was data actually passed to the method
            if(item == null)
            {
                throw new ArgumentNullException("Product information was not received. Add not done.");
            }

            //does the pkey exist?
            //product has a pkey of IDENTITY
            //there is no need to check to see if the pkey already exists since the
            //      primary key will be generated by the database
            //HOWEVER, if your pkey is NOT an identity, you could check to see if
            //  the value for the pkey is already in use, if so, throw an exception

          

            //are there any other business rules to check
            //YOU MAY NOT HAVE ANY OTHER BUSINESS RULES TO CHECK!!!!!!!!!!!!!!!!!!!
            //An example of business rules (product duplication) for this demo could be that the product
            //  a) is from the same supplier
            //  b) with the same product name
            //  c) having the same quantity per unit

            bool exists = false; //flag

            //the method does NOT need the actual record, JUST needs to know if the condition exists: .Any(...)
            exists = _context.Products
                            .Any(x => x.SupplierID == item.SupplierID
                                   && x.ProductName.Equals(item.ProductName)
                                   && x.QuantityPerUnit.Equals(item.QuantityPerUnit));

            //check the results of your complex business rule
            if (exists)
                throw new ArgumentException($"Product {item.ProductName} from " +
                    $" {item.Supplier.CompanyName} of size {item.QuantityPerUnit} " +
                    $" already on file.");


            //after all business rules have been passed, you can assume the 
            //  data is good to be placed on the database

            //if your field is an IDENTITY key then override any value in the field 
            //set the pkey value to zero
            //prevents an IDENTITY_INSERT flag problem from occuring
            item.ProductID = 0;

            //there is two steps to complete the process of adding your data to the database
            // a) Staging
            // b) Commit

            //Staging
            //EntityFramework sets up all db processing in local memory first
            //what is needed for staging
            // a) know the DbSet : Products
            // b) know the action : Add
            // c) know the instance of the DbSet to use: item

            //IMPORTANT: the data is in LOCAL MEMORY
            //           the data is NOT!!! yet been sent to the database
            //THEREFORE: at this time, there is NO!!!!! IDENTITY primary key value
            //              on this instance (except for the default of the datatype)
            //UNLESS: you have place a value in the NON_IDENTITY key field(s)

            _context.Products.Add(item);

            //Commit
            // this sends ALL staged data in local memory to the database for processing

            //ANY annotation validation is in your entity, it is executed to validate the data
            //  going to the database
            //if there is a validation problem then an exception is thrown and processing of
            //  the commit is terminated (transaction RollBack)

            _context.SaveChanges();

            //AFTER the successful commit to the database, your new product id
            //  primary key is available to you via the item.ProductID
            //Optionally, you could return this value to the calling process

            return item.ProductID;
        }

        public int Product_Update(Product item)
        {
            //do any validation needed within the service method

            //  was data actually passed to the method
            if (item == null)
            {
                throw new ArgumentNullException("Product information was not received. Update not done.");
            }

            //does the pkey exist?
            //if the pkey does not exist then no update will happen
            //check to see if an update to the expected record can be done
            //   by looking for the pkey
            if (!_context.Products.Any(x => x.ProductID == item.ProductID))
                throw new ArgumentException($"Product {item.ProductName}  " +
                    $" of size {item.QuantityPerUnit} " +
                    $" is not on file. Check for the product again");


            //are there any other business rules to check
            //YOU MAY NOT HAVE ANY OTHER BUSINESS RULES TO CHECK!!!!!!!!!!!!!!!!!!!
            //An example of business rules (product duplication) for this demo could be that the product
            //  a) is from the same supplier
            //  b) with the same product name
            //  c) having the same quantity per unit
            //  d) AND is NOT the current product (all other products)!!!!!

            bool exists = false; //flag

            //the method does NOT need the actual record, JUST needs to know if the condition exists: .Any(...)
            exists = _context.Products
                            .Any(x => x.SupplierID == item.SupplierID
                                   && x.ProductName.Equals(item.ProductName)
                                   && x.QuantityPerUnit.Equals(item.QuantityPerUnit)
                                   && x.ProductID != item.ProductID);

            //check the results of your complex business rule
            if (exists)
                throw new ArgumentException($"Product {item.ProductName} from " +
                    $" {item.Supplier.CompanyName} of size {item.QuantityPerUnit} " +
                    $" already on file.");


            //after all business rules have been passed, you can assume the 
            //  data is good to be placed on the database

            //there is two steps to complete the process of adding your data to the database
            // a) Staging
            // b) Commit

            EntityEntry<Product> updating = _context.Entry(item);
            updating.State =Microsoft.EntityFrameworkCore.EntityState.Modified;

            //Commit
            // this sends ALL staged data in local memory to the database for processing

            //for the update, SaveChanges will return the "number of rows affected" on the database
            //return this value to the web page so an appropriate feedback message can be issued
            return _context.SaveChanges();

        }
        #endregion
    }
}

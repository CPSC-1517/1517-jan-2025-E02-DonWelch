@page "/productcrud/{productid:int?}"
<!--
on the page directive above, a routing parameter has been add syntax: /routingname/{parametername:datatype}
this will allow an integer value to be passed to this page
the routing parameter (productid) needs to be declare in your code area below

if you have the situation where your receive page may or maynot receive a parameter
value THEN make the datatype nullable (?)
-->
@using WestWindSystem.Entities
@using WestWindSystem.BLL


<PageTitle>Product CRUD</PageTitle>

<h1>Product CRUD</h1>

@if (feedBackMessage != null)
{
    <div class="alert alert-info">
        @feedBackMessage
    </div>
}

<!-- EditForm this groups a bunch of controls as a single form
allows for adding additonal option to integrate with your form controls
contains a set of enhanced input controls

register an EditContext instance for this form

DataAnnotationsValidator   the DataAnnotationsValidator component is used within an
EditForm to enable validation based on data annotations
applied to model properties.

ValidationSummary displays a list of all validation errors
show a summary of errors at the top of the form
errors can be from model properties or custom messages
this is optional

ValidationMessage displays the message associated with the indicated entity field
this is optional

-->

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <!--
    the form controls will appear between the start and end EditForm tags

    what about format layout
    you can use your normal formatting (eg bootstrap) in laying out your form
    -->
    <div class="row">
        <div class="offset-1 col-md-4">
            <label for="productid" class="form-label">Product ID</label>
            <!--
            We can use enhanced input type controls with EditForm
            No type is need for the EditForm control
            Binding parameter: bind-Value is required when using EditForm controls
            -->
            <InputNumber id="productid" class="form-control"
            @bind-Value="CurrentProduct.ProductID"
            style="width:75px;" readonly/>
            <br/>
            <label for="productname" class="form-label">Name</label>
            <InputText id="productname" class="form-control"
            @bind-Value="CurrentProduct.ProductName"
            placeholder="product name"/>
            <ValidationMessage For="@(() => CurrentProduct.ProductName)"/>
            <!-- foreign keys-->
            <br />
            <label for="supplier" class="form-label">Supplier</label>
            <InputSelect id="supplier" class="form-control"
            @bind-Value="CurrentProduct.SupplierID">
                <option value="0">... select ...</option>    
                @foreach(Supplier item in suppliers)
                {
                    @*
                    on this option the selected parameter is testing
                       the current supplier id of the supplier list against
                       the current supplier id of the current product record

                    if there is a match, the selected line item will be the
                       line item shown on the page
                    *@
                    <option value="@item.SupplierID"
                           selected="@(item.SupplierID == CurrentProduct.SupplierID)">
                        @item.CompanyName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
            <br />
            <label for="category" class="form-label">Category</label>
            <InputSelect id="category" class="form-control"
                         @bind-Value="CurrentProduct.CategoryID">
                <option value="0">... select ...</option>
                @foreach (Category item in categories)
                {
                    <option value="@item.CategoryID"
                            selected="@(item.CategoryID == CurrentProduct.CategoryID)">
                        @item.CategoryName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
        </div>
        <div class="offset-1 col-md-4">
            <label for="qtyperunit" class="form-label">Qty/Unit</label>
            <InputText id="qtyperunit" class="form-control"
                       @bind-Value="CurrentProduct.QuantityPerUnit"
                       placeholder="qty per unit" />
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
            <br/>
            <label for="unitprice" class="form-label">Unit Price</label>
            <InputNumber id="unitprice" class="form-control"
                       @bind-Value="CurrentProduct.UnitPrice" />
            <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
            <br />
            <label for="minorderqty" class="form-label">Min Order Qty</label>
            <InputNumber id="minorderqty" class="form-control"
                         @bind-Value="CurrentProduct.MinimumOrderQuantity" />
            <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
            <br />
            <label for="unitsonorder" class="form-label">Units on Order</label>
            <InputNumber id="unitsonorder" class="form-control"
                         @bind-Value="CurrentProduct.UnitsOnOrder" />
            <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        </div>
    </div>
    <br/><br/>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnCreate" style="width:130px;">
                Create
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnUpdate" style="width:130px;">
                Update
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnDelete" style="width:130px;">
                Discontinue
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnClear" style="width:130px;">
                Clear
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="GoToSearch" style="width:130px;">
                Search
            </button>
        </div>
    </div>
</EditForm>


@code {

    private string? feedBackMessage;

    [Inject]
    private ProductServices _productServices { get; set; }
    //the variable that will be used with EditForm via editContext to hold the
    //  entered and displayed data
    private Product CurrentProduct = new();

    //declare a property for the routing parameter
    //this particular property needs an annotation indicating it is a Parameter
    [Parameter]
    public int? productid { get; set; }

    [Inject]
    private CategoryServices _categoryServices { get; set; }
    private List<Category> categories = new();

    // private int selectedCategoryId;
    [Inject]
    private SupplierServices _supplierServices { get; set; }
    private List<Supplier> suppliers = new();


    [Inject]
    protected NavigationManager CurrentNavigationManager { get; set; }

    //Editform properties and variables
    //will hold the instance of the data that is being maintained on the form
    private EditContext editContext;

    protected override void OnInitialized()
    {
        //create the EditContext instance AND tie it to the instance of the entity of the form
        editContext = new EditContext(CurrentProduct);



        categories = _categoryServices.Categories_Get();
        suppliers = _supplierServices.Supplier_GetList();
        base.OnInitialized();

    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnCreate()
    {
        
    }
    private void OnUpdate()
    {

    }
    private void OnDelete()
    {

    }
    private void OnClear()
    {

    }
    private void GoToSearch()
    {

    }
}

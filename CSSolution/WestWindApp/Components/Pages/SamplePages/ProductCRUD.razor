@page "/productcrud/{productid:int?}"
<!--
on the page directive above, a routing parameter has been add syntax: /routingname/{parametername:datatype}
this will allow an integer value to be passed to this page
the routing parameter (productid) needs to be declare in your code area below

if you have the situation where your receive page may or maynot receive a parameter
value THEN make the datatype nullable (?)

if your parameter is a string, you do not need to specify the routing parameter datatype HOWEVER you
will still want to place a ? (nullable) character at the end of the routing parameter name (eg stringpkey?)
-->
@using WestWindSystem.Entities
@using WestWindSystem.BLL


<PageTitle>Product CRUD</PageTitle>

<!-- remember: if you have buttons to click, you need to add the rendermode directive
IF you forget this directive when using EditForm you will receive the following error message:

The POST request does not specify which form is being submitted. To fix this, ensure <form> elements have
a @formname attribute with any unique value, or pass a FormName parameter if using <EditForm>.
-->
@rendermode InteractiveServer


<h1>Product CRUD</h1>

@if (feedBackMessage != null)
{
    <div class="alert alert-info">
        @feedBackMessage
    </div>
}

<!-- EditForm this groups a bunch of controls as a single form
              allows for adding additonal option to integrate with your form controls
               contains a set of enhanced input controls

      register an EditContext instance for this form

      DataAnnotationsValidator   the DataAnnotationsValidator component is used within an
                                   EditForm to enable validation based on data annotations
                                   applied to model properties.

       ValidationSummary displays a list of all validation errors
                           shown in a summary of errors at the top of the form
                         errors can be from model properties or custom messages
                         this is optional

       ValidationMessage displays the message associated with the indicated entity field
                          this is optional

-->

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <!--
    the form controls will appear between the start and end EditForm tags

    what about format layout
    you can use your normal formatting (eg bootstrap) in laying out your form
    -->
    <div class="row">
        <div class="offset-1 col-md-4">
            <label for="productid" class="form-label">Product ID</label>
            <!--
            We can use enhanced input type controls with EditForm
            No type is need for the EditForm control
            Binding parameter: bind-Value is required when using EditForm controls
            -->
            <InputNumber id="productid" class="form-control"
            @bind-Value="CurrentProduct.ProductID"
            style="width:75px;" readonly/>
            <br/>
            <label for="productname" class="form-label">Name</label>
            <InputText id="productname" class="form-control"
            @bind-Value="CurrentProduct.ProductName"
            placeholder="product name"/>
            <!--
               immediately after your input control you can add the validation
               message tag IF you want your messages immediately after the control

               you can omit this control and still display an error message associated
               with this control with the ValidationSummary
               -->
            <ValidationMessage For="@(() => CurrentProduct.ProductName)"/>
            <!-- foreign keys-->
            <br />
            <label for="supplier" class="form-label">Supplier</label>
            <InputSelect id="supplier" class="form-control"
            @bind-Value="CurrentProduct.SupplierID">
                <option value="0">... select ...</option>    
                @foreach(Supplier item in suppliers)
                {
                    @*
                    on this option the selected parameter is testing
                       the current supplier id of the supplier list against
                       the current supplier id of the current product record

                    if there is a match, the selected line item will be the
                       line item shown on the page
                    *@
                    <option value="@item.SupplierID"
                           selected="@(item.SupplierID == CurrentProduct.SupplierID)">
                        @item.CompanyName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
            <br />
            <label for="category" class="form-label">Category</label>
            <InputSelect id="category" class="form-control"
                         @bind-Value="CurrentProduct.CategoryID">
                <option value="0">... select ...</option>
                @foreach (Category item in categories)
                {
                    <option value="@item.CategoryID"
                            selected="@(item.CategoryID == CurrentProduct.CategoryID)">
                        @item.CategoryName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
        </div>
        <div class="offset-1 col-md-4">
            <label for="qtyperunit" class="form-label">Qty/Unit</label>
            <InputText id="qtyperunit" class="form-control"
                       @bind-Value="CurrentProduct.QuantityPerUnit"
                       placeholder="qty per unit" />
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
            <br/>
            <label for="unitprice" class="form-label">Unit Price</label>
            <InputNumber id="unitprice" class="form-control"
                       @bind-Value="CurrentProduct.UnitPrice" />
            <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
            <br />
            <label for="minorderqty" class="form-label">Min Order Qty</label>
            <InputNumber id="minorderqty" class="form-control"
                         @bind-Value="CurrentProduct.MinimumOrderQuantity" />
            <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
            <br />
            <label for="unitsonorder" class="form-label">Units on Order</label>
            <InputNumber id="unitsonorder" class="form-control"
                         @bind-Value="CurrentProduct.UnitsOnOrder" />
            <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        </div>
    </div>
    <br/><br/>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnCreate" style="width:130px;">
                Create
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnUpdate" style="width:130px;">
                Update
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnDelete" style="width:130px;">
                Discontinue
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnClear" style="width:130px;">
                Clear
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="GoToSearch" style="width:130px;">
                Search
            </button>
        </div>
    </div>
</EditForm>


@code {

    private string? feedBackMessage;

    [Inject]
    private ProductServices _productServices { get; set; }
    //the variable that will be used with EditForm via editContext to hold the
    //  entered and displayed data
    private Product CurrentProduct = new();

    //declare a property for the routing parameter
    //this particular property needs an annotation indicating it is a Parameter
    [Parameter]
    public int? productid { get; set; }

    [Inject]
    private CategoryServices _categoryServices { get; set; }
    private List<Category> categories = new();

    // private int selectedCategoryId;
    [Inject]
    private SupplierServices _supplierServices { get; set; }
    private List<Supplier> suppliers = new();


    [Inject]
    protected NavigationManager CurrentNavigationManager { get; set; }

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    //Editform properties and variables
    //will hold the instance of the data that is being maintained on the form
    private EditContext editContext;
    //declare the ValidationMessageStore
    private ValidationMessageStore validationMessageStore; //replaces the errorMsgs list

    protected override void OnInitialized()
    {
        //if a routing parameter values was passed then we should assume that the user
        //  has made a selection and would like to view the current data on the database
        //therefore, we need to consume a service that will retreive the the data from the database
        //to test a nullable field, one can use the .HasValue property of the field's datatype
        //to obtain the nullable field data value use .Value of the property 
        //IMPORTANT the fetch of the database record MUST be done before assigning to editContext
        if (productid.HasValue)
            CurrentProduct = _productServices.Product_GetByID(productid.Value);

        //create the EditContext instance AND tie it to the instance of the entity of the form
        editContext = new EditContext(CurrentProduct);
        //create validation MessageStore instance and indicate which EditContext it is
        //      associated with
        //needed for custom validation within the event code and
        //   allows the user to use the ValidationMesssage controls of the form
        validationMessageStore = new ValidationMessageStore(editContext);


        categories = _categoryServices.Categories_Get();
        suppliers = _supplierServices.Supplier_GetList();
        base.OnInitialized();

    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnCreate()
    {

    }
    private void OnUpdate()
    {

    }
    private void OnDelete()
    {

    }
    private async Task OnClear()
    {
        feedBackMessage = "";
        object[] messageline = new object[]
        {"Clearing the page will lose all unsaved data. Are you sure you wish to continue?"};

        if (await jsRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            //remove any old custom error message place in the validation message store
            validationMessageStore.Clear();

            //clear the fields
            //clear the current product instance of any data (not using local variables)
            //notice that the "system" constructor is used as the entity has NO constructor code within it
            CurrentProduct = new Product();

            //IMPORTANT!!!!!!!!!!!!!!!!!!
            //the editContext is associated with the current product instance
            //the editContext REQUIRES to be reset to the NEW current product instance
            editContext = new EditContext(CurrentProduct);
        }
    }
    private async Task GoToSearch()
    {
        feedBackMessage = "";
        object[] messageline = new object[]
        {"Leaving the page will lose all unsaved data. Are you sure you wish to continue?"};

        if (await jsRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            CurrentNavigationManager.NavigateTo("categoryproducts");
        }
    }
}
